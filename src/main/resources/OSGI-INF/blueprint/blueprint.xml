<?xml version="1.0" encoding="UTF-8"?>
<!-- This is the OSGi Blueprint XML file defining the CXF JAX-RS beans. Because the file is in the OSGI-INF/blueprint directory inside our JAR, it will be automatically activated 
	as soon as the artifact is installed. The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint and the CXF 
	JAX-RS namespaces. -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
	xsi:schemaLocation="
      http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
      http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd">

	<bean id="helloBean" class="com.github.camel.blueprint.HelloBean">
		<property name="say" value="Hi from Camel" />
	</bean>

	<bean id="corsFilter" class="org.apache.cxf.rs.security.cors.CrossOriginResourceSharingFilter">
		<property name="allowCredentials" value="true" />
		<!-- <property name="allowOrigins" value="*" /> -->
	</bean>

	<bean id="swaggerResourceJSON" class="com.wordnik.swagger.jaxrs.listing.ApiListingResourceJSON" />
	<bean id="resourceWriter" class="com.wordnik.swagger.jaxrs.listing.ResourceListingProvider" />
	<bean id="apiWriter" class="com.wordnik.swagger.jaxrs.listing.ApiDeclarationProvider" />

<!-- 	<bean id="swaggerConfig" class="com.wordnik.swagger.jaxrs.config.BeanConfig"> -->
<!-- 		<property name="resourcePackage" value="com.github" /> -->
<!-- 		<property name="version" value="1.0.0" /> -->
<!-- 		<property name="basePath" value="http://localhost:8181/cxf/api" /> -->
<!-- 		<property name="title" value="Strikersoft Print Engine - Rest" /> -->
<!-- 		<property name="description" value="This is a app." /> -->
<!-- 		<property name="contact" value="sp.titan@gmail.com" /> -->
<!-- 		<property name="license" value="Apache 2.0 License" /> -->
<!-- 		<property name="licenseUrl" value="http://www.apache.org/licenses/LICENSE-2.0.html" /> -->
<!-- 		<property name="apiReader" value="com.wordnik.swagger.jersey.JerseyApiReader"/> -->
<!-- 		<property name="scan" value="true" /> -->
<!-- 	</bean> -->

	<jaxrs:server id="swaggerAPI" address="/swagger">
		<jaxrs:serviceBeans>
			<ref component-id="swaggerResourceJSON" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<!-- <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" /> -->
			<!-- <bean class="com.ge.aviation.svc.fss.exception.WebExceptionHandler" /> -->
			<ref component-id="resourceWriter" />
			<ref component-id="apiWriter" />
			<ref component-id="corsFilter" />
		</jaxrs:providers>
	</jaxrs:server>

	<jaxrs:server id="versionService" address="/rest">
		<jaxrs:serviceBeans>
			<bean class="com.github.VersionServiceCxfrsImpl">
				<property name="shortBuildVersion" value="${git.buildnumber}" />
				<property name="buildTimeStamp" value="${timestamp}" />
				<property name="gitTag" value="${git.tag}" />
				<property name="gitRevision" value="${git.revision}" />
				<property name="userName" value="${user.name}" />
				<property name="jenkinsJobBuildInfo" value="${jenkinsJobBuildInfo}" />
				<property name="marketVersion" value="${marketVersion}" />
			</bean>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<bean class="org.apache.cxf.jaxrs.model.wadl.WadlGenerator">
				<property name="addResourceAndMethodIds" value="true" />
			</bean>
			<bean class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
				<property name="singleJaxbContext" value="true" />
			</bean>
			<ref component-id="resourceWriter" />
			<ref component-id="apiWriter" />
			<ref component-id="corsFilter" />
		</jaxrs:providers>
		<jaxrs:features>
			<bean class="org.apache.cxf.jaxrs.swagger.SwaggerFeature" />
		</jaxrs:features>
	</jaxrs:server>

	<!-- <camelContext xmlns="http://camel.apache.org/schema/blueprint"> -->
	<!-- <route id="ti"> -->
	<!-- <from uri="timer:foo?period=5000" /> -->
	<!-- <setBody> -->
	<!-- <method ref="helloBean" method="hello" /> -->
	<!-- </setBody> -->
	<!-- <log message="The message 22777 contains ${body}" /> -->
	<!-- <to uri="mock:result" /> -->
	<!-- </route> -->

	<!-- </camelContext> -->

</blueprint>